@startuml
'https://plantuml.com/class-diagram

class Armor {
    + public String name
    + public int defense
}
Helmet --|> Armor
Robe --|> Armor
Shield --|> Armor

GameCharacter  o--> "0-1" Weapon
GameCharacter  o--> "0-*" Armor

abstract class GameCharacter {
    - String name
    - int health
    - int experiencePoints
    - int level
    - Strategy strategy
    {abstract} + accept(CharacterVisitor v)
    + applyDamage(int damage)
    + int getDamage()
}

note bottom of GameCharacter: "Getters and setters for \nall private attributes"


class Warrior {
    - int strength
}
Warrior --|> GameCharacter

class Wizard {
    - int intelligence
}
Wizard --|> GameCharacter

class Healer {
    - int wisdom
}
Healer --|> GameCharacter

class Weapon {
    + String name;
    + int damage;
}

class Sword {
    + int sharpness
}
Sword --|> Weapon

class Staff {
    + int magic
}
Staff --|> Weapon

class Wand {
    + int magic
}
Wand --|> Weapon

class Team {
    - String name
    + addPlayer(GameCharacter player)
    + removePlayer(GameCharacter player)
    + getPlayer(string name)
    + containsPlayer(GameCharacter player)
    + containsPlayer(string name)
    + int size()
}

Team "0-1" --> "0-*" GameCharacter

class GameConfiguration {
    {static} - GameConfiguration instance
    + int difficulty
    + int maxPartySize
    {static} + getInstance()
}

Team ..> GameConfiguration

interface CharacterCreator {
    {abstract} +GameCharacter createCharacter(String name, int level, boolean isArmed, boolean isArmored)
}

HealerCreator ..|> CharacterCreator
WarriorCreator ..|> CharacterCreator
WizardCreator ..|> CharacterCreator

abstract class CharacterVisitor {
    {abstract} + visitHealer(Healer character)
    {abstract} + visitWizard(Wizard character)
    {abstract} + visitWarrior(Warrior character)
    + visitTeam(Team t)
}

CharacterVisitor ..> Team
CharacterVisitor ..> GameCharacter

class BuffVisitor {
    - int intensity
}
BuffVisitor --|> CharacterVisitor

class HealVisitor {
    - int healAmount
}
HealVisitor --|> CharacterVisitor

class DamageVisitor {
    - int damage
}
DamageVisitor --|> CharacterVisitor

interface Strategy {
    {abstract} + int getModifiedDamage(int damage)
}

OffensiveStrategy ..|> Strategy
NeutralStrategy ..|> Strategy
DefensiveStrategy ..|> Strategy

interface Observer {
    {abstract} + update(Observable observable)
}
LevelUpObserver ..|> Observer
LevelUpObserver ..> GameCharacter
DeathObserver ..|> Observer
DeathObserver ..> GameCharacter
abstract class Observable {
    + notifyObservables()
    + void attach(Observer observer)
    + void detach(Observer observer)
}
Observable "*" --> "*" Observer
GameCharacter --|> Observable


@enduml